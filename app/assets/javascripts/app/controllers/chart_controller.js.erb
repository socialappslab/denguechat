var chartCtrl = function ($scope, $http, $cookies, $attrs) {
  console.log($cookies["chart"])
  $scope.chartOptions = JSON.parse($cookies["chart"]);
  var ajax            = fetchData($scope, $http);

  ajax.success(function(response) {
    console.log(response)
    refreshChartWithData($scope, response);
  });
  ajax.error(function(response) {
    $(".error-message").show();
    $(".loading-spinner").hide();
  });
  ajax.then(function(response) {
    $(".loading-spinner").hide();
  });
};


function fetchData($scope, $http) {
  console.log($scope.chartOptions)
  var pathName = window.location.pathname;
  var ajax     = $http({url: "/api/v0" + pathName + "/chart.json", method: "GET", params: $scope.chartOptions});
  return ajax;
}

function refreshChartWithData($scope, response) {
  if (response.length <= 1) {
    $(".fa-refresh").hide();
    $(".empty-chart-disclaimer").show();
  } else {
    google.load( 'visualization', '1', {'packages':['corechart'], 'callback': function(){ drawChart("timeseries-chart", response, $scope.chartOptions) } } );
  }

}



// We use inline annotation to declare services in order to bypass
// errors when JS gets minified:
// https://docs.angularjs.org/tutorial/step_05
var app = angular.module('dengueChatApp');
app.controller("chartCtrl", ["$scope", "$http", "$cookies", "$attrs", chartCtrl]);




var googleChartOptions = function(chartID, data, chartOptions) {
  var width = $(chartID).width();

  var colors = []

  if ( chartOptions.status.positive != null )
    colors.push("#e74c3c");

  if ( chartOptions.status.potential != null )
    colors.push("#f1c40f")

  if ( chartOptions.status.negative != null )
    colors.push("#2ecc71")



  var options =  {
    width: width,
    chartArea: {
      left: 50,
      right: 50,
      top: 50,
      bottom: 0,
      width: "90%",
      height: "70%"
    },
    hAxis: {},
    vAxis: {
      gridlines: {
        color: "transparent"
      },
      format: "#\'%\'"
    },
    backgroundColor: '#eff0f3',
    legend: {
      position: "none",
      alignment: "start",
      textStyle: {
        fontSize: "15"
      }
    },
    colors: colors
  };


  if ( shouldDisplayLineChart(chartOptions) )
    options.hAxis.showTextEvery = parseInt(data.getNumberOfRows() / 4);
  else
    options.hAxis.slantedtextangle = 90;

  return options;
}


// Checks the selected timeframe radio button and returns the appropriate
// graph.
// Scope: A helper function.
function shouldDisplayLineChart(options) {
  // var timeline = $("#timeframe-filter input:radio:checked").map(function(index, el) { return $(el).val() });
  // if (timeline[0] == "-1" || timeline[0] == "6")
  //   return true
  // else
  //   return false
  console.log(options.timeframe)
  var timeframe = parseInt(options.timeframe)
  return (timeframe == -1 || timeframe == 6)
}

function googleDataView(data, chartOptions) {
  var view = new google.visualization.DataView(data);
  // Select the default display

  var columns = [0];
  var index = 1;
  for (var key in chartOptions.status)
  {
    if (chartOptions.status[key] != null)
      columns.push(index, {calc: "stringify", sourceColumn: index, type: "string", role: "annotation"})
    index += 1;
  }

  // if ( !shouldHidePositive() )
  //   columns.push(1, {calc: "stringify", sourceColumn: 1, type: "string", role: "annotation"})
  //
  // if ( !shouldHidePotential() )
  //   columns.push(2, {calc: "stringify", sourceColumn: 2, type: "string", role: "annotation"})
  //
  // if ( !shouldHideNegative() )
  //   columns.push(3, {calc: "stringify", sourceColumn: 3, type: "string", role: "annotation"})

  view.setColumns(columns);
  return view;
}


function drawChart(chartID, rawData, options) {
  var chartHTMLElement = document.getElementById(chartID)

  if (shouldDisplayLineChart(options) == true)
    chart = new google.visualization.LineChart(chartHTMLElement);
  else
    chart = new google.visualization.ColumnChart(chartHTMLElement);


  // Initialize the critical variables.

  var data      = new google.visualization.arrayToDataTable(rawData);
  var formatter = new google.visualization.NumberFormat({suffix: "%", fractionDigits: 0});
  formatter.format(data, 1);
  formatter.format(data, 2);
  formatter.format(data, 3);

  // Let's hide the columns corresponding to unchecked checkboxes.
  var view    = googleDataView(data, options);
  var options = googleChartOptions(chartID, data, options)
  chart.draw(view, options);
}
