var chartCtrl = function ($scope, $http, $cookies, $attrs, filterFilter) {
  $scope.chartOptions = JSON.parse($cookies.chart);
  $scope.chartLoading = false;
  $scope.noChartData  = false;

  $scope.neighborhood = angular.fromJson($attrs.neighborhood);
  $scope.locations    = angular.fromJson($attrs.locations);


  $scope.refreshChartWithParams = function(params) {
    $scope.chartLoading = true;
    var pathName = window.location.pathname;

    params.neighborhood_id = $scope.neighborhood.id;
    params.timeframe = $scope.chartOptions.timeframe;
    params.positive  = $scope.chartOptions.positive;
    params.potential = $scope.chartOptions.potential;
    params.negative  = $scope.chartOptions.negative;
    params.percentages = $scope.chartOptions.percentages;

    var ajax = $http({url: "/api/v0/graph/locations.json", method: "GET", params: params });

    ajax.success(function(response) {
      if (response.length <= 1) {
        $scope.noChartData = true;
      } else {
        $scope.noChartData = false;
        google.load( 'visualization', '1', {'packages':['corechart'], 'callback': function(){ drawChart("timeseries-chart", response, $scope.chartOptions) } } );
      }
    });
    ajax.error(function(response) {
      $scope.chartLoading = false;
    });
    ajax.then(function(response) {
      $scope.chartLoading = false;
    });
  }

  $scope.refreshChart();

  $scope.$watch("chartOptions.percentages", function(newValue, oldValue)
  {
    if (newValue === oldValue)
      return;
    $scope.refreshChart();
  });

  $scope.$watch("chartOptions.timeframe", function(newValue, oldValue)
  {
    if (newValue === oldValue)
      return;
    $scope.refreshChart();
  });

  $scope.$watch("chartOptions.positive", function(newValue, oldValue)
  {
    if (newValue === oldValue)
      return;
    $scope.refreshChart();
  });

  $scope.$watch("chartOptions.potential", function(newValue, oldValue)
  {
    if (newValue === oldValue)
      return;
    $scope.refreshChart();
  });

  $scope.$watch("chartOptions.negative", function(newValue, oldValue)
  {
    if (newValue === oldValue)
      return;
    $scope.refreshChart();
  });

};



// We use inline annotation to declare services in order to bypass
// errors when JS gets minified:
// https://docs.angularjs.org/tutorial/step_05
var app = angular.module('dengueChatApp');
app.controller("chartCtrl", ["$scope", "$http", "$cookies", "$attrs", chartCtrl]);




var googleChartOptions = function(chartID, data, chartOptions) {
  var width = $(chartID).width();

  var colors = []

  if ( chartOptions.positive )
    colors.push("#e74c3c");

  if ( chartOptions.potential )
    colors.push("#f1c40f")

  if ( chartOptions.negative )
    colors.push("#2ecc71")


  var options =  {
    width: width,
    chartArea: {
      left: 50,
      right: 50,
      top: 50,
      bottom: 0,
      width: "90%",
      height: "70%"
    },
    hAxis: {},
    vAxis: {
      gridlines: {
        color: "transparent"
      },
      format: "#\'%\'"
    },
    // backgroundColor: 'white',
    legend: {
      position: "none",
      alignment: "start",
      textStyle: {
        fontSize: "15"
      }
    },
    colors: colors
  };


  if ( shouldDisplayLineChart(chartOptions) )
    options.hAxis.showTextEvery = parseInt(data.getNumberOfRows() / 4);
  else
    options.hAxis.slantedtextangle = 90;

  return options;
}


// Checks the selected timeframe radio button and returns the appropriate
// graph.
// Scope: A helper function.
function shouldDisplayLineChart(options) {
  var timeframe = parseInt(options.timeframe)
  return (timeframe == -1 || timeframe == 6)
}

function googleDataView(data, chartOptions) {
  var view = new google.visualization.DataView(data);
  // Select the default display

  var columns = [0];

  if ( chartOptions.positive )
    columns.push(1, {calc: "stringify", sourceColumn: 1, type: "string", role: "annotation"})

  if ( chartOptions.potential )
    columns.push(2, {calc: "stringify", sourceColumn: 2, type: "string", role: "annotation"})

  if ( chartOptions.negative )
    columns.push(3, {calc: "stringify", sourceColumn: 3, type: "string", role: "annotation"})

  view.setColumns(columns);
  return view;
}


function drawChart(chartID, rawData, options) {
  var chartHTMLElement = document.getElementById(chartID)

  if (shouldDisplayLineChart(options) == true)
    chart = new google.visualization.LineChart(chartHTMLElement);
  else
    chart = new google.visualization.ColumnChart(chartHTMLElement);


  // Initialize the critical variables.

  var data      = new google.visualization.arrayToDataTable(rawData);
  var formatter = new google.visualization.NumberFormat({suffix: "%", fractionDigits: 0});
  formatter.format(data, 1);
  formatter.format(data, 2);
  formatter.format(data, 3);

  // Let's hide the columns corresponding to unchecked checkboxes.
  var view    = googleDataView(data, options);
  var options = googleChartOptions(chartID, data, options)
  chart.draw(view, options);
}
