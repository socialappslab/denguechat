var dengueChatApp = angular.module('dengueChatApp', ["ngCookies", "ngSanitize"]);

// The only difference between our linky and the "linky" is that we're
// not sanitizing the HTML in order to allow for @dmitri mentions.
angular.module('ngSanitize').filter('denguechatLinky', [function() {
  var LINKY_URL_REGEXP = /((ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"\u201d\u2019]/i,
      MAILTO_REGEXP = /^mailto:/i;

  return function(text, target) {
    if (!text) return text;
    var match;
    var raw = text;
    var html = [];
    var url;
    var i;
    while ((match = raw.match(LINKY_URL_REGEXP))) {
      // We can not end in these as they are sometimes found at the end of the sentence
      url = match[0];
      // if we did not match ftp/http/www/mailto then assume mailto
      if (!match[2] && !match[4]) {
        url = (match[3] ? 'http://' : 'mailto:') + url;
      }
      i = match.index;
      addText(raw.substr(0, i));
      addLink(url, match[0].replace(MAILTO_REGEXP, ''));
      raw = raw.substring(i + match[0].length);
    }
    addText(raw);
    return html.join('');

    function addText(text) {
      if (!text) {
        return;
      }
      html.push(text);
    }

    function addLink(url, text) {
      html.push('<a ');
      if (angular.isDefined(target)) {
        html.push('target="',
                  target,
                  '" ');
      }
      html.push('href="',
                url.replace(/"/g, '&quot;'),
                '">');
      addText(text);
      html.push('</a>');
    }
  };
}]);


var compressFileFromHTMLInput = function(element) {
  var file = element.files[0];

  element = angular.element(element);
  element.parent().append("<canvas style='display: none;'></canvas>");
  preview = element.parent().find(".preview")
  var canvas     = element.parent().find("canvas")[0];
  var compressedHTMLInput = element.parent().find(".compressed_photo")

  if (!file.type.match('image.*'))
    return;

  var reader = new FileReader();
  reader.onload = (function(file) {
    return function(e) {
      var image = new Image();
      image.src = e.target.result;
      image.onload = function () {
        var compressedImage = compressImageOntoCanvas(image, canvas)
        preview.attr({src: compressedImage, title: escape(file.name)});
        element.val("");
        $(compressedHTMLInput).val(compressedImage)
      };
    };
  })(file);

  reader.readAsDataURL(file);
}


// Helper function.
compressImageOntoCanvas = function(image, canvas) {
  var width  = image.width;
  var height = image.height;
  var maxWidth  = 517;
  var maxHeight = 600;

  if (width > height) {
    if (width > maxWidth) {
      height *= maxWidth / width;
      width = maxWidth;
    }
  }
  else {
    if (height > maxHeight) {
      width *= maxHeight / height;
      height = maxHeight;
    }
  }

  // Draw the canvas image with new dimensions, and append.
  canvas.height = height;
  canvas.width  = width;
  var ctx = canvas.getContext("2d");
  ctx.drawImage(image, 0, 0, width, height);

  // NOTE: We're using 0.75 JPEG quality per this article:
  // http://www.html5rocks.com/en/tutorials/speed/img-compression/
  return canvas.toDataURL("image/jpeg", 1.0);
}


var directive = function(){
  return {
    restrict: "A",
    link: function(scope, element, attrs) {
      element.on("change", function(event) {
        if ( window.File && window.FileReader && window.FileList && window.Blob )
          compressFileFromHTMLInput(event.target);
        else
        {
          alert('The File APIs are not fully supported in this browser.');
          return false;
        }
      })
    }
  }
}

dengueChatApp.directive("compressImage", directive);






var directive = function($http){
  return {
    restrict: "A",
    link: function(scope, element, attrs) {
      element.on("submit", function(event) {
        event.preventDefault();

        element.find(".fa-spin").show();
        element.find(":submit").attr("disabled", true)

        var fd   = new FormData();
        var form = element.serializeArray();
        for (var i = 0; i < form.length; i++) {
          fd.append( form[i].name, form[i].value );
        }

        $.ajax({
          url:  event.currentTarget.action,
          type: event.currentTarget.method,
          data: fd,
          contentType: false,
          processData: false,
          success: function(response) {
            window.alert("Ã‰xito!");
            console.log(response)
            // window.location.href = response.redirect_path;
          },

          error: function(response) {
            alert(response.responseJSON.message);
          },

          complete: function(response) {
            element.find(".fa-spin").hide();
            element.find(":submit").attr("disabled", false)

          }
        })
      })
    }
  }
}

dengueChatApp.directive("remoteSubmit", ["$http", directive]);
