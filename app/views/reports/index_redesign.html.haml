.row
  .span4.offset1
    - if flash[:notice] 
      .row#flash_dat_notice
        #flashNotice 
          %p
            = flash[:notice]
    - if flash[:alert] 
      .row#flash_dat_alert
        #flashAlert 
          %p
            = flash[:alert]
    %h1 Focos marcados
  %br
  .span#report_buttons{:style => "font-size:20px;"}
    / %h1 Marcar um foco

.row          

  .row

    -#Report List
    .span9.offset1

      = render :partial => 'reports/open_redesign'

    .span7#map_container{'ng-controller'=>'MapController'}
      Marker:{{markers[11]}}
      #map_instance
      #loading



        :javascript
                $(window).scroll(function() {
                  var scrollAmount = $(window).scrollTop();
                  if (scrollAmount > 200) {
                    $("#map_instance").css("margin-top", scrollAmount - 263);
                  } else {
                    $("#map_instance").css("margin-top", -63);
                  }
                });

        :javascript
          angular.module('dengue_torpedo.controllers').
            controller("MapController", function($scope){
            $scope.map = null;
             $scope.markers = #{@markers.to_json};
             $scope.open_markers = #{@open_markers.to_json};
             $scope.eliminated_markers = #{@eliminated_markers.to_json};
             $scope.$on('update_map',function(marker){

             })
             $scope.$on('start_new_report',function(test){

             })

             $('#new_report_div').on('show',function(){
                $scope.new_map();
             })

             $('#new_report_div').on('hide',function(){
                $scope.update_map();
             })



             $scope.new_map = function(){

             var tb;
             require(["esri/map", "esri/toolbars/draw", "esri/tasks/locator", "esri/layers/ArcGISTiledMapServiceLayer", "esri/SpatialReference", "esri/geometry/Point", "esri/config", "esri/graphic", "esri/symbols/SimpleMarkerSymbol", "esri/symbols/SimpleLineSymbol", "esri/symbols/TextSymbol", "dojo/_base/Color", "esri/symbols/PictureMarkerSymbol", "esri/renderers/ClassBreaksRenderer", "dojo/domReady!"], function(Map, Draw, Locator, Tiled, SpatialReference, Point, Geometry, Graphic, SimpleMarkerSymbol, SimpleLineSymbol, TextSymbol, Color, PictureMarkerSymbol, ClassBreaksRenderer) {
               var customExtent = new esri.geometry.Extent(667070.412263838,7456962.88258577,688175.480935968,7475960.60361382, new esri.SpatialReference({"wkid":29193}));

               var picBaseUrl = "http://static.arcgis.com/images/Symbols/Shapes/";
               var grey = new PictureMarkerSymbol("/assets/markers/grey_marker.png", 48, 48).setOffset(0, 0);
               var mixed = new PictureMarkerSymbol("/assets/markers/mixed_marker.png", 48, 48).setOffset(0, 0);
               var orange = new PictureMarkerSymbol("/assets/markers/orange_marker.png", 48, 48).setOffset(0, 0);
               var point = new Point(680291.2151545063, 7470751.29586681, new esri.SpatialReference({wkid: 29193}));
               $scope.map.destroy();
               $scope.map = new Map("map_instance", {
                 center: point,
                 zoom: 4,
                 extent: customExtent
               });

               var tiled = new Tiled("http://pgeo2.rio.rj.gov.br/ArcGIS2/rest/services/Basico/mapa_basico_utm/MapServer");
               $scope.map.addLayer(tiled);
               //map.on("update-start", showLoading);
               //map.on("update-end", hideLoading);
               $scope.map.on("load", function() {
                 tb = new Draw($scope.map);
                 tb.on("draw-end", addGraphic);
                 tb.activate("point");
               });



               function addGraphic(evt) {
                 $scope.map.graphics.clear();
                 $scope.map.enableMapNavigation();

                 // figure out which symbol to use
                 var symbol = new SimpleMarkerSymbol();
                 symbol.setStyle("STYLE_PATH");
                 symbol.setPath("M 10 10 L30 10 L20 30z");
                 symbol.setColor(new Color("red"));

                 $("input#latitude").val(evt.geometry.x);
                 $("input#longitude").val(evt.geometry.y);
                 $scope.map.graphics.add(new Graphic(evt.geometry, orange));
                 $scope.map.centerAt(evt.mapPoint);

              }});
             }

             $scope.update_map = function(){

                 if($scope.map != null)
                  $scope.map.destroy();

                 var report_div;
                 require(["esri/map", "esri/toolbars/draw", "esri/tasks/locator", "esri/layers/ArcGISTiledMapServiceLayer", "esri/layers/FeatureLayer", "esri/SpatialReference", "esri/geometry/Point", "esri/config", "esri/graphic", "esri/symbols/SimpleMarkerSymbol", "esri/symbols/SimpleLineSymbol", "esri/symbols/TextSymbol", "dojo/_base/Color", "esri/symbols/PictureMarkerSymbol", "esri/renderers/ClassBreaksRenderer", "esri/dijit/Popup", "esri/dijit/PopupTemplate", "dojo/dom-construct", "dojo/dom", "esri/InfoTemplate", "dojo/domReady!"], function(Map, Draw, Locator, Tiled, FeatureLayer, SpatialReference, Point, Geometry, Graphic, SimpleMarkerSymbol, SimpleLineSymbol, TextSymbol, Color, PictureMarkerSymbol, ClassBreaksRenderer, Popup, PopupTemplate, domConstruct, dom, InfoTemplate) {
                   var customExtent = new esri.geometry.Extent(667070.412263838,7456962.88258577,688175.480935968,7475960.60361382, new esri.SpatialReference({"wkid":29193}));
                   var popup = new Popup({
                     highlight: false
                   }, domConstruct.create("div"));

                   var point = new Point(680291.2151545063, 7470751.29586681, new esri.SpatialReference({wkid: 29193}));
                   $scope.map  = new Map("map_instance", {
                     center: point,
                     zoom: 4,
                     extent: customExtent,
                     infoWindow:popup
                   });
                   function showLoading() {
                     $("#loading").show();
                     $scope.map.disableMapNavigation();
                     $scope.map.hideZoomSlider();
                   }

                   function hideLoading() {
                     $("#loading").hide();
                     $scope.map.enableMapNavigation();
                     $scope.map.showZoomSlider();
                   }
                   //$scope.map.on("update-start", showLoading);
                   //$scope.map.on("update-end", hideLoading);

                   var tiled = new Tiled("http://pgeo2.rio.rj.gov.br/ArcGIS2/rest/services/Basico/mapa_basico_utm/MapServer");
                   $scope.map.addLayer(tiled);

                   var addresses = [];
                   var coordinates = [];

                   var picBaseUrl = "http://static.arcgis.com/images/Symbols/Shapes/";
                   var gray = new PictureMarkerSymbol(picBaseUrl + "BlackPin1LargeB.png", 40, 40).setOffset(0, 15);
                   var blue = new PictureMarkerSymbol(picBaseUrl + "BluePin1LargeB.png", 40, 40).setOffset(0, 15);
                   var red = new PictureMarkerSymbol(picBaseUrl + "OrangePin1LargeB.png", 40, 40).setOffset(0, 15);


                   var grey = new PictureMarkerSymbol("/assets/markers/grey_marker.png", 48, 48).setOffset(0, 0);
                   var mixed = new PictureMarkerSymbol("/assets/markers/mixed_marker.png", 48, 48).setOffset(0, 0);
                   var orange = new PictureMarkerSymbol("/assets/markers/orange_marker.png", 48, 48).setOffset(0, 0);
                   var counts = #{@counts.to_json};
                   var open_counts = #{@open_counts.to_json};
                   var eliminated_counts = #{@eliminated_counts.to_json};


                   $(".mapa").click(function() {
                     var latitude = $(this).data("latitude");
                     var longitude = $(this).data("longitude");

                     $scope.map.centerAndZoom(new Point(latitude, longitude, new esri.SpatialReference({"wkid": 29193})), 8);

                     report_div = $(this).parent().parent().parent();


                     return false;
                   });

                   $scope.map.on("load", function() {
                     $scope.map.infoWindow.resize(300, 200);
                     if ("#{params[:view]}" == 'recent') {
                       for (var i = 0; i < $scope.markers.length; i++) {
                         count = counts[$scope.markers[i].id];
                         open_count = open_counts[$scope.markers[i].id];
                         eliminated_count = eliminated_counts[$scope.markers[i].id];

                         var template = new InfoTemplate();
                         template.setTitle($scope.markers[i].address);
                         template.content = "<p>Em aberto: </p><br><p>Eliminados: </p>";
                         var graphic;
                         var textGraphic;

                         if ($.inArray($scope.markers[i].address, addresses) == -1) {
                           addresses.push($scope.markers[i].address);


                           var x;
                           var y;

                           if ($.inArray(JSON.stringify({"x": $scope.markers[i].x, "y": $scope.markers[i].y}), coordinates) == -1) {

                             coordinates.push(JSON.stringify({"x": $scope.markers[i].x, "y": $scope.markers[i].y}));
                             x = $scope.markers[i].x;
                             y = $scope.markers[i].y;

                           } else {
                             x = $scope.markers[i].x + Math.cos(Math.random()) * 20;
                             y = $scope.markers[i].y + Math.sin(Math.random()) * 20;
                           }






                           if (open_count && eliminated_count) {
                             graphic = new Graphic(new Point(x, y), mixed);
                             template.content = "<p>Em aberto: " + open_count + "</p><br><p>Eliminados: " + eliminated_count + "</p>";
                           } else if (open_count > 0) {
                             graphic = new Graphic(new Point(x, y), orange);
                             template.content = "<p>Em aberto: " + open_count + "</p>";
                           } else if (eliminated_count > 0) {
                             graphic = new Graphic(new Point(x, y), grey);
                             template.content = "<p>Eliminados: " + eliminated_count + "</p>";
                           }

                           textSymbol = new TextSymbol(count).setColor("#000000").setOffset(-11, 8);
                           textGraphic = new Graphic(new Point(x, y), textSymbol);
                           graphic.setInfoTemplate(template);
                           textGraphic.setInfoTemplate(template);
                           $scope.map.graphics.add(graphic);
                           $scope.map.graphics.add(textGraphic);
                         }

                       }
                       } else if ("#{params[:view]}" == 'open') {
                         for (var i = 0; i < $scope.open_markers.length; i++) {
                           if ($.inArray($scope.open_markers[i].address, addresses) == -1) {
                             addresses.push($scope.open_markers[i].address);
                             var template = new InfoTemplate();
                             template.setTitle($scope.open_markers[i].address);

                             count = open_counts[$scope.open_markers[i].id];
                             template.content = "<p>Em aberto: " + count + "</p>";
                             textSymbol = new TextSymbol(count).setColor("#000000").setOffset(-11, 8);

                             var graphic = new Graphic(new Point($scope.open_markers[i].x, $scope.open_markers[i].y), orange);
                             var textGraphic = new Graphic(new Point($scope.open_markers[i].x, $scope.open_markers[i].y), textSymbol);
                             graphic.setInfoTemplate(template);
                             textGraphic.setInfoTemplate(template);
                             $scope.map.graphics.add(graphic);
                             $scope.map.graphics.add(textGraphic);
                           }

                         }
                       } else {
                         for (var i = 0; i < $scope.eliminated_markers.length; i++) {
                           if ($.inArray($scope.eliminated_markers[i].address, addresses) == -1) {
                             var template = new InfoTemplate();
                             template.setTitle($scope.eliminated_markers[i].address);

                             count = eliminated_counts[$scope.eliminated_markers[i].id];
                             template.content = "<p>Eliminados: " + count + "</p>";
                             textSymbol = new TextSymbol(count).setColor("#000000").setOffset(-11, 8);

                             var graphic = new Graphic(new Point($scope.eliminated_markers[i].x, $scope.eliminated_markers[i].y), grey);
                             var textGraphic = new Graphic(new Point($scope.eliminated_markers[i].x, $scope.eliminated_markers[i].y), textSymbol);
                             graphic.setInfoTemplate(template);
                             textGraphic.setInfoTemplate(template);
                             $scope.map.graphics.add(graphic);
                             $scope.map.graphics.add(textGraphic);
                           }
                         }
                       }

                     });

                     $("input#go_to_mare").click(function() {
                       $scope.map.centerAndZoom(new Point(point.x, point.y, new esri.SpatialReference({"wkid": 29193})), 4);
                     });

                     $scope.map.on("extent-change", function(event) {
                       if ($scope.markers.length > 0) {
                         for(var i = 0; i < $scope.markers.length; i++) {

                           if (event.extent.contains(new Point($scope.markers[i].x, $scope.markers[i].y)) || ($scope.markers[i].x == null && $scope.markers[i].y == null) || ($scope.markers[i].x == 0.0 && $scope.markers[i].y == 0.0)) {
                             $($(".rp_report")[i]).show();
                           } else {
                             $($(".rp_report")[i]).hide();
                           }
                         }
                       } else {
                         for (var i = 0; i < $scope.open_markers.length; i++) {
                           if (event.extent.contains(new Point($scope.open_markers[i].x, $scope.open_markers[i].y))) {
                             $($(".rp_report")[i]).show();
                           } else {
                             $($(".rp_report")[i]).hide();
                           }

                         }

                         for (var i = 0;i < $scope.eliminated_markers.length; i++) {
                           if (event.extent.contains(new Point($scope.eliminated_markers[i].x, $scope.eliminated_markers[i].y))) {
                             $($(".rp_report")[i]).show();
                           } else {
                             $($(".rp_report")[i]).hide();
                           }
                         }
                       }
                       if (report_div) {
                         $("html, body").scrollTop($(report_div).offset().top - 20);
                       }


                     });

                     var blueGraphic;

                     function addGraphic(evt) {
                       if (blueGraphic) {
                         $scope.map.graphics.remove(blueGraphic);
                       }
                       $scope.map.enableMapNavigation();

                       // figure out which symbol to use
                       var symbol = new SimpleMarkerSymbol();
                       symbol.setStyle("STYLE_PATH");
                       symbol.setPath("M 10 10 L30 10 L20 30z");
                       symbol.setColor(new Color("blue"));

                       $("input#x").val(evt.geometry.x);
                       $("input#y").val(evt.geometry.y);

                       blueGraphic = new Graphic(evt.geometry, symbol);
                       $scope.map.graphics.add(blueGraphic);
                       $scope.map.centerAt(evt.mapPoint);

                     }
                     $("#address_search_form").submit(function(e) {
                       e.preventDefault();
                       $.ajax({
                         url: "http://pgeo2.rio.rj.gov.br/ArcGIS2/rest/services/Geocode/DBO.Loc_composto/GeocodeServer/findAddressCandidates",
                         type: "GET",
                         dataType: "jsonp",
                         data: {"f": "pjson", "Street": $("#address_search").val()},
                         success: function(m) {

                           var candidates = m.candidates;


                           if (candidates.length > 0) {
                             if (blueGraphic) {
                               $scope.map.graphics.remove(blueGraphic);
                             }
                             var symbol = new SimpleMarkerSymbol();
                             symbol.setStyle("STYLE_PATH");
                             symbol.setPath("M 10 10 L30 10 L20 30z");
                             symbol.setColor(new Color("blue"));
                             blueGraphic = new Graphic(new Point(candidates[0].location.x, candidates[0].location.y), symbol);
                             $scope.map.graphics.add(blueGraphic);
                             $("input#x").val(candidates[0].location.x);
                             $("input#y").val(candidates[0].location.y);

                             $scope.map.centerAndZoom(new Point(candidates[0].location.x, candidates[0].location.y, new esri.SpatialReference({"wkid": 29193})), 4);
                           }
                         },
                         error: function(m) {
                           console.log(JSON.stringify(m));
                         }
                       });

                     });

                   });
                 }


                 $scope.update_map();

              })



