= render :partial => "shared/flashes"
.container
  .row{:style => "margin-bottom: 20px;"}
    .col-md-8.col-xs-8
      %h1.light-font
        CSV

    .col-md-4.col-xs-4
      .pull-right
        = link_to batch_csv_reports_path, :class => "btn btn-success" do
          %i.fa.fa-file
          = I18n.t("views.csv_reports.batch_upload")
        = link_to new_csv_report_path, :class => "btn btn-success" do
          %i.fa.fa-file
          = I18n.t("views.buttons.upload_csv")
        = link_to odk_sync_errors_path, class: "btn btn-warning" do
          %i.fa.fa-refresh
          = I18n.t("views.buttons.odk_sync")

  - if @current_user.coordinator? || @current_user.delegator?
    .row
      .col-md-12
        .panel.panel-default
          .panel-heading
            %h3.panel-title
              Opciones
              = @current_user.coordinator? ? "coordenador" : "delegado"
              .pull-right
                %i.fa.fa-eye
                Visible sólo a los
                = @current_user.coordinator? ? "coordinadores" : "delegados"
          .panel-body
            .row
              .col-md-6
                %p.form-label
                  = I18n.t("activerecord.models.user", :count => 2)

                %div{:layout => "column", "ng-cloak" => "", "ng-controller" => "autocompleteCtrl as ctrl", :users => @users.to_json(:only => [:id, :name, :username])}
                  -# %h1.text-center{"ng-show" => "loadingPage"}
                  -#   %i.fa.fa-spin.fa-refresh
                  %md-content.md-padding
                    .form-inline.text-center
                      .form-group
                        %md-autocomplete{"md-items" => "user in ctrl.querySearch(ctrl.searchText)", "md-min-length" => "0", "md-search-text" => "ctrl.searchText", "md-selected-item" => "ctrl.selectedItem", "md-item-text" => "ctrl.displayName(user)", :placeholder => "Busque usuarios"}
                          %md-item-template
                            %span{"md-highlight-flags" => "^i", "md-highlight-text" => "ctrl.searchText"}
                              {{ctrl.displayName(user)}}
                          %md-not-found
                            No hay resultados de usuario
                      %a.btn.btn-success{"ng-click" => "loadUserCSV()"}
                        Buscar

                %br
                %p.form-label
                  Páginas
                .text-center
                  = render :partial => "csv_reports/pagination"

              - if @current_user.coordinator?
                .col-md-6
                  %p.form-label
                    = I18n.t("activerecord.models.neighborhood", :count => 2)
                  %ul.list-group
                    = link_to "Todas las comunidades", csv_reports_path, :class => "list-group-item #{params[:neighborhood_id].blank? ? 'active' : ''}"
                    - @current_user.city.neighborhoods.each do |neighborhood|
                      = link_to csv_reports_path(:neighborhood_id => neighborhood.id), :class => "list-group-item #{params[:neighborhood_id] == neighborhood.id.to_s ? 'active' : ''}" do
                        = neighborhood.name


  .row
    .col-md-12
      .panel.panel-default
        %table.table.table-bordered.table-hover.text-center.statistics-table
          %thead
            %th.text-center{:class => (params[:sort] == 'date' ? 'active' : '' )}
              Fecha de carga
              = link_to csv_reports_path( params.slice(:neighborhood_id, :user_id).merge(:sort => "date", :order => "asc", search_location: params[:search_location]) ) do
                %i.fa.fa-angle-up
              = link_to csv_reports_path( params.slice(:neighborhood_id, :user_id).merge(:sort => "date", :order => "desc", search_location: params[:search_location]) ) do
                %i.fa.fa-angle-down
            %th.text-center
              = I18n.t("activerecord.models.neighborhood", :count => 1)
            %th.text-center{:class => (params[:sort] == 'user' ? 'active' : '' )}
              = I18n.t("activerecord.models.user", :count => 1)
              = link_to csv_reports_path( params.slice(:neighborhood_id, :user_id).merge(:sort => "user", :order => "asc", search_location: params[:search_location]) ) do
                %i.fa.fa-angle-up
              = link_to csv_reports_path( params.slice(:neighborhood_id, :user_id).merge(:sort => "user", :order => "desc", search_location: params[:search_location]) ) do
                %i.fa.fa-angle-down
            %th.text-center
              CSV
            %th.text-center{:class => (params[:sort] == 'location' ? 'active' : '' )}
              = I18n.t("attributes.location_id")
              = link_to csv_reports_path( params.slice(:neighborhood_id, :user_id).merge(:sort => "location", :order => "asc", search_location: params[:search_location]) ) do
                %i.fa.fa-angle-up
              = link_to csv_reports_path( params.slice(:neighborhood_id, :user_id).merge(:sort => "location", :order => "desc", search_location: params[:search_location]) ) do
                %i.fa.fa-angle-down
              .location-search
                = text_field_tag "location", params[:search_location]
                %button#location-search
                  %i.fa.fa-search
            %th.text-center
              = I18n.t("activerecord.attributes.visit.visited_at")
            %th.text-center
              Condición
          %tbody
            - @csvs.each do |csv|
              - visits = csv.visits.order("visited_at ASC").map {|v| v.visited_at.strftime("%Y-%m-%d")}.uniq
              %tr{:data => {"csv_id" => csv.id}}
                %td{"style" => "width: 20%;"}
                  = csv.updated_at.strftime("%Y-%m-%d %H:%M")
                %td
                  = csv.neighborhood.name
                %td{"style" => "width: 15%;"}
                  = csv.user && "#{csv.user.username} (#{csv.user.name})"
                %td{"style" => "width: 15%;"}
                  = link_to csv.csv.url do
                    = csv.csv_file_name
                    %i.fa.fa-download
                %td{"style" => "width: 15%;"}
                  = csv.location.address if csv.location.present?
                %td{"style" => "width: 25%;"}
                  %ul.list-group
                    - visits.each do |visit_date|
                      %li.list-group-item
                        = visit_date
                %td{"style" => "width: 25%;"}
                  - if csv.csv_errors.present?
                    = I18n.t("views.csv_reports.parsing_errors")
                    %ul.list-group
                      - csv.csv_errors.each do |error|
                        %li.list-group-item
                          = CsvError.humanized_errors[error.error_type]
                    Tienes que borrar el CSV, corregir los errores y volver a subir
                    = link_to I18n.t("views.csv_reports.delete"), api_v0_csv_report_path(csv), :method => "DELETE", "remote-link" => true, :reload => true, :class => "btn btn-danger btn-block", :prompt => I18n.t("common_terms.are_you_sure")

                  - elsif csv.parsed_at.blank?
                    = I18n.t("views.csv_reports.parsing") + "..."
                  - else
                    = link_to I18n.t("common_terms.edit"), csv_report_path(csv), :class => "btn btn-warning btn-block"
                    - if csv.verified_at.present?
                      = I18n.t("views.csv_reports.verified_time_ago", :time => time_ago_in_words(csv.verified_at))

:javascript
  $(document).ready(function() {
    $("#location-search").click(function() {
      var search_location = $("input[name=location]").val();
      var current = location.search;
      if (current == "") {
        location.href = location.origin + location.pathname + "&search_location=" + search_location;
      } else {
        if (current.includes("search_location")) {
          var params = current.substr(1).split("&");
          for (var param of params) {
            var new_search = params.map(function(item) {
                var k = item.split("=")[0];
                var v = item.split("=")[1];
                if (k == 'search_location') {
                    v = escape(search_location);
                };
              return k+"="+v;
            });
            location.href = location.origin + location.pathname + "?" + new_search.join("&");
          }
        } else {
          location.href = location.origin + location.pathname + current + "&search_location=" + search_location;
        }
      }
    })
  });