= render :partial => "shared/flashes"

.container

  .row{:style => "margin-bottom: 20px;"}
    .col-md-8.col-xs-8
      %h1.light-font
        Sus reportes cargados en CSV

    .col-md-4.col-xs-4
      .pull-right
        = link_to batch_csv_reports_path, :class => "btn btn-success" do
          %i.fa.fa-file
          = I18n.t("views.csv_reports.batch_upload")
        = link_to new_csv_report_path, :class => "btn btn-success" do
          %i.fa.fa-file
          = I18n.t("views.buttons.upload_csv")

  .row
    .col-md-12
      .panel.panel-default
        .panel-heading
          %h3.panel-title
            Reglas
        .panel-body
          %p.light-font
            Upload a new CSV to let DengueChat parse it for visits and breeding sites. If you are have a CSV with updated visits, you should still upload it, but make sure to name it THE SAME as the original CSV to make sure DengueChat combines the visit and breeding site data.

  .row
    .col-md-12
      .panel.panel-default
        %table.table.table-bordered.table-hover.text-center.statistics-table
          %thead
            %th.text-center
              CSV
            %th.text-center
              = I18n.t("attributes.location_id")
            %th.text-center
              Fecha de carga
            %th.text-center
              = I18n.t("activerecord.attributes.visit.visited_at")
            %th.text-center
              CondiciÃ³n
          %tbody
            %tr
              %td.text-left.light-font
                Hint: Name your CSV the same as the location to ensure DengueChat combines
                the visit and breeding site data.
              %td
              %td
              %td
              %td
            - @csvs.each do |csv|
              - visits = csv.visits.order("visited_at ASC").map {|v| v.visited_at.strftime("%Y-%m-%d")}.uniq
              %tr{:data => {"csv_id" => csv.id}}
                %td{"style" => "width: 20%;"}
                  = link_to csv.csv_file_name, csv.csv.url
                %td{"style" => "width: 20%;"}
                  = csv.location.address if csv.location.present?
                %td{"style" => "width: 20%;"}
                  = csv.created_at.strftime("%Y-%m-%d %H:%M")
                %td{"style" => "width: 20%;"}
                  %ul.list-group
                    - visits.each do |visit_date|
                      %li.list-group-item
                        = visit_date
                %td{"style" => "width: 20%;"}
                  - if csv.csv_errors.present?
                    = link_to I18n.t("views.csv_reports.failed_with_errors"), csv_report_path(csv), :class => "btn btn-danger btn-block"
                  - elsif csv.parsed_at.blank?
                    = I18n.t("views.csv_reports.parsing") + "..."
                  - elsif csv.verified_at.blank?
                    = link_to I18n.t("views.csv_reports.verify"), verify_csv_report_path(csv), :class => "btn btn-warning btn-block"
                  - else
                    = link_to I18n.t("views.csv_reports.view"), csv_report_path(csv), :class => "btn btn-info btn-block"

                  %hr

                  = link_to I18n.t("views.csv_reports.delete"), api_v0_csv_report_path(csv), :method => "DELETE", "remote-link" => true, :reload => true, :class => "text-danger", :prompt => I18n.t("common_terms.are_you_sure")
