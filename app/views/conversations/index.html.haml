= render :partial => "shared/flashes"
= render :partial => "shared/form_errors", :locals => {:item => @message}

.row
  .col-md-12.col-md-offset-1
    .row
      .col-md-6
        %h1{:style => "font-size: 40px;"}
          = I18n.t("activerecord.models.conversation", :count => 2)

      .col-md-4{:style => "text-align: right;"}
        = link_to "+ #{I18n.t('views.conversations.index.new_message')}", nil, :class => "btn btn-success btn-large", :id => "create-new-message"


    .row
      .col-md-10
        - should_display_form = (flash[:show_new_message_form] == true || params[:form] == "true")
        = form_for [@current_user, @message], :html => { :id => "new-message-form", :class => "form-horizontal well", :style => "#{should_display_form == true ? '' : 'display: none;'}; margin-top: 20px;" } do |f|
          .form-group
            = label_tag I18n.t("views.conversations.index.to"), nil, :class => "control-label col-md-4"
            .col-md-8
              = text_area_tag :users, params[:users], :class => "form-control span6 typeahead", :style => "height: 50px;"
          .form-group
            = f.label :body, I18n.t("attributes.content"), :class => "control-label col-md-4"
            .col-md-8
              = f.text_area :body, :class => "form-control span6", :style => "height: 50px;"
          .form-group
            .col-md-8.col-md-offset-4
              = button_tag :type => "submit", :class => "btn btn-success btn-block submit-button" do
                %i.fa.fa-refresh.fa-spin{:style => "display:none;"}
                = I18n.t("views.buttons.create")


    .row{:style => "margin-top: 20px;"}
      .col-md-10
        - @conversations.each do |c|
          .user_activity_item
            .row
              .col-md-6
                .row.feed-item-bar
                  .col-md-6

                    .feed-item-timestamp
                      %i.fa.fa-clock-o
                      = timestamp_in_metadata(c.updated_at)
                .row.feed-item-content
                  .col-md-6
                    = I18n.t("views.conversations.index.messages_between") + " #{c.users.map(&:display_name).join(', ')}"

              .col-md-3.pull-right{:style => "line-height: 60px; height: 60px;"}
                = link_to user_conversation_path(@current_user, c) do
                  = I18n.t("views.conversations.index.visit_messages")
                  %i.fa.fa-chevron-right


= javascript_include_tag "bootstrap/typeahead"

:javascript
  $(document).ready(function()
  {
    $("#create-new-message").on("click", function(e)
    {
      e.preventDefault();
      $("#new-message-form").toggle()
    });

    // Bootstrap typeahead. See
    // http://stackoverflow.com/questions/12662824/twitter-bootstrap-typeahead-multiple-values
    // for more.
    !function(source) {
      function extractor(query) {
        var result = /([^,]+)$/.exec(query);
        if(result && result[1])
          return result[1].trim();
        return '';
      }

      $('.typeahead').typeahead({
        source: source,
        updater: function(item) {
            return this.$element.val().replace(/[^,]*$/,'')+item+',';
        },
        matcher: function (item) {
          var tquery = extractor(this.query);
          if(!tquery) return false;
          return ~item.toLowerCase().indexOf(tquery.toLowerCase())
        },
        highlighter: function (item) {

          var query = extractor(this.query).replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&')
          return item.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {
            return '<strong>' + match + '</strong>'
          })
        }
      });
    }(#{@users});
  })
